{"version":3,"sources":["Form.js","Todo.js","TodoList.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","action","className","onChange","e","target","value","type","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filterTodos","App","useState","status","setFilterTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12a47c4d.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaPlus } from \"react-icons/fa/index\";\nimport \"./form.css\";\n\nexport default function Form({\n\tinputText,\n\tsetInputText,\n\ttodos,\n\tsetTodos,\n\tsetStatus,\n}) {\n\tconst inputTextHandler = e => {\n\t\tsetInputText(e.target.value);\n\t};\n\tconst submitTodoHandler = e => {\n\t\te.preventDefault();\n\t\tsetTodos([\n\t\t\t...todos,\n\t\t\t{ text: inputText, completed: false, id: Math.random() * 1000 },\n\t\t]);\n\t\tsetInputText(\"\");\n\t};\n\tconst statusHandler = e => {\n\t\tsetStatus(e.target.value);\n\t};\n\treturn (\n\t\t<>\n\t\t\t<form action=\"\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\tonChange={inputTextHandler}\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-100 p-1 mb-4\"\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tvalue={inputText}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={submitTodoHandler}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-sm btn-success submit\"\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<FaPlus />\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-12 selected\">\n\t\t\t\t\t\t\t<select onChange={statusHandler} name=\"todos\" id=\"\">\n\t\t\t\t\t\t\t\t<option value=\"all\">All</option>\n\t\t\t\t\t\t\t\t<option value=\"completed\">Completed</option>\n\t\t\t\t\t\t\t\t<option value=\"uncompleted\">Uncompleted</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</>\n\t);\n}\n","import React from \"react\";\nimport { FaTrash, FaCheck } from \"react-icons/fa/index\";\nimport \"./todo.css\";\nexport default function Todo({ text, todo, setTodos, todos }) {\n\tconst deleteHandler = () => {\n\t\tsetTodos(todos.filter(el => el.id !== todo.id));\n\t};\n\tconst completeHandler = () => {\n\t\tsetTodos(\n\t\t\ttodos.map(item => {\n\t\t\t\tif (item.id === todo.id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\tcompleted: !item.completed,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t})\n\t\t);\n\t};\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"row no-gutters\">\n\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName={`p-2 my-1 bg-warning text-center todo-item ${\n\t\t\t\t\t\t\ttodo.completed ? \"completed\" : \"\"\n\t\t\t\t\t\t}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{text}\n\t\t\t\t\t</li>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-12 d-flex flex-row justify-content-center\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={completeHandler}\n\t\t\t\t\t\tclassName=\"my-1 ml-1 btn btn-success\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<FaCheck />\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={deleteHandler} className=\"btn my-1 ml-1 btn-danger\">\n\t\t\t\t\t\t<FaTrash />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport Todo from \"./Todo\";\n\nexport default function TodoList({ todos, setTodos, filterTodos }) {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t<ul className=\"todo-list w-100 list-unstyled mt-5\">\n\t\t\t\t\t\t{filterTodos.map(todo => (\n\t\t\t\t\t\t\t<Todo\n\t\t\t\t\t\t\t\ttodos={todos}\n\t\t\t\t\t\t\t\tsetTodos={setTodos}\n\t\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\t\ttodo={todo}\n\t\t\t\t\t\t\t\ttext={todo.text}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"./Form\";\nimport TodoList from \"./TodoList\";\n\nfunction App() {\n\tconst [inputText, setInputText] = useState(\"\");\n\tconst [todos, setTodos] = useState([]);\n\tconst [status, setStatus] = useState(\"all\");\n\tconst [filterTodos, setFilterTodos] = useState([]);\n\n\tuseEffect(() => {\n\t\tgetLocalTodos();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tfilterHandler();\n\t\tsaveLocalTodos();\n\t}, [todos, status]);\n\n\tconst filterHandler = () => {\n\t\tswitch (status) {\n\t\t\tcase \"completed\":\n\t\t\t\tsetFilterTodos(todos.filter(todo => todo.completed === true));\n\t\t\t\tbreak;\n\t\t\tcase \"uncompleted\":\n\t\t\t\tsetFilterTodos(todos.filter(todo => todo.completed === false));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsetFilterTodos(todos);\n\t\t}\n\t};\n\n\tconst saveLocalTodos = () => {\n\t\tlocalStorage.setItem(\"todos\", JSON.stringify(todos));\n\t};\n\tconst getLocalTodos = () => {\n\t\tif (localStorage.getItem(\"todos\") === null) {\n\t\t\tlocalStorage.setItem(\"todos\", JSON.stringify([]));\n\t\t} else {\n\t\t\tlet todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n\t\t\tsetTodos(todoLocal);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t<h1 className=\"text-center my-5\">Shoping Cart</h1>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Form\n\t\t\t\t\tinputText={inputText}\n\t\t\t\t\tsetInputText={setInputText}\n\t\t\t\t\ttodos={todos}\n\t\t\t\t\tsetTodos={setTodos}\n\t\t\t\t\tstatus={status}\n\t\t\t\t\tsetStatus={setStatus}\n\t\t\t\t/>\n\t\t\t\t<TodoList filterTodos={filterTodos} todos={todos} setTodos={setTodos} />\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}